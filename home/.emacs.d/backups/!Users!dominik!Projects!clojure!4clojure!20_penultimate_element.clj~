(defn version-a
  [coll]
  (loop [remaining coll]
    (if (= (count remaining) 2)
      (first remaining)
      (recur (rest remaining)))))

(= (version-a (list 1 2 3 4 5)) 4)


(defn version-b
  [coll]
  (first (keep-indexed (fn [index val]
                         (if (= index (- (count coll) 2)) val nil))
                       coll)))

(= (version-b (list 1 2 3 4 5)) 4)


(defn x-from-end
  [x]
  (fn [coll]
    (let [target (- (dec (count coll)) x)]
      (first (keep-indexed (fn [index val] (if (= index target) val nil))
                           coll)))))

(def one-from-end (x-from-end 1))
(def two-from-end (x-from-end 2))

(= (one-from-end [1 2 3 4 5]) 4)
(= (two-from-end [1 2 3 4 5]) 3)


;; duh...
(defn version-c [coll] (nth coll (- (count coll) 2)))

(= (version-c (list 1 2 3 4 5)) 4)
