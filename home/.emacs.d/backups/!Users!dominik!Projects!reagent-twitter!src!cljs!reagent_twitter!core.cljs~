(ns reagent-twitter.core
    (:require [reagent.core :as reagent :refer [atom]]
              [secretary.core :as secretary :include-macros true]
              [accountant.core :as accountant]
              [stylefy.core :as stylefy]))

;; -------------------------
;; Views

(def twits (atom {}))
(def main-page-twits (atom []))
(def twit-input-state (atom ""))
(def user (atom {:username "domisiuclj"
                 :display-name "Dominik"
                 :avatar-src "https://cdn3.iconfinder.com/data/icons/avatars-9/145/Avatar_Cat-512.png"}))

(def get-id
  (let [id (atom 0)]
    (fn []
      (swap! id inc)
      @id)))

(defrecord Twit [id deleted? time text])

(defn make-twit
  [text]
  (->Twit (get-id) false (.now js/Date) text))

(defn submit-twit!
  []
  (let [input-value @twit-input-state]
    (when (not= input-value "")
      (let [new-twit (make-twit @twit-input-state)
            twit-id (:id new-twit)]
        (swap! twits assoc twit-id new-twit)
        (swap! main-page-twits conj twit-id)
        (reset! twit-input-state "")))))

(defn update-twit-input!
  [event]
  (.preventDefault event)
  (reset! twit-input-state (.-target.value event)))

(def twit-input-style {:width "100%"
                       :max-width "400px"
                       :padding "10px 20px"
                       :border "0"
                       :border-radius "4px"
                       :box-shadow "1px 1px 2px 0 rgba(0, 0, 0, 0.1)"
                       :resize "none"})

(defn twit-input
  []
  [:form {:on-submit submit-twit!}
   [:textarea (merge {:type "text"
                      :value @twit-input-state
                      :maxlength "140"
                      :on-change update-twit-input!
                      :on-blur submit-twit!}
                     (stylefy/use-style twit-input-style))]])

(def avatar-style {:width "48px"
                   :height "48px"
                   :border-radius "50%"
                   :background-size "cover"})

(def avatar-interactive-style
  {:transition "transform 0.4s, box-shadow 0.4s"
   ::stylefy/mode {:hover {:transform "translateY(-1px)"
                           :box-shadow "1px 1px 1px 0 rgba(0, 0, 0, 0.1)"}}})

(defn avatar
  [{:keys [interactive src]}]  
  [:div (merge {:style {:background-image (str "url(" src ")")}}
               (stylefy/use-style
                (merge avatar-style
                       (when interactive avatar-interactive-style))))])

(def text-style {:font-size "16px"
                 :font-family "sans-serif"
                 :color "#333"})

(defn text
  [{:keys [span]} & children]
  (let [el (if span :span :div)]
    [el (stylefy/use-style text-style) children]))

(defn link
  [{:keys [href]} & children]
  [:a (merge {:href href}
             (stylefy/use-style text-style))
   children])

(def twit-style {:max-width "400px"
                 :margin "5px 0"
                 :padding "10px 20px"
                 :background-color "#f5f5f5"
                 :box-shadow "1px 1px 2px 0 rgba(0, 0, 0, 0.1)"
                 :border-radius "5px"})

(def twit-header-style {:display "flex"
                        :align-items "center"})

(defn twit
  [{:keys [key user time]} & children]
  (let [{:keys [username display-name avatar-src]} user]
    [:div (merge {:key key} (stylefy/use-style twit-style))
     [:div (stylefy/use-style twit-header-style)
      [avatar {:interactive true :src avatar-src}]
      [link {:href (str "/" username)}
       display-name]
      [text {} time]]
     [text {} children]]))

(defn twit->component
  [{:keys [id text time]}]
  [twit {:key id :user @user :time time} text])

(defn twit-stream
  []
  (let [twit-ids @main-page-twits
        twit-data @twits
        twit-list (->> (rseq twit-ids)
                       (take 10)
                       (map #(get twit-data %))
                       (map twit->component))]
    [:div twit-list]))

(def app-style {:width "100%"
                :min-height "100vh"
                :background-color "#fafafa"})

(defn home-page []
  [:div (stylefy/use-style app-style)
   [:h2 "Welcome to reagent-twitter"]
   [twit-input]
   [twit-stream]])

;; -------------------------
;; Routes

(def page (atom #'home-page))

(defn current-page []
  [:div [@page]])

(secretary/defroute "/" []
  (reset! page #'home-page))

;; -------------------------
;; Initialize app

(defn mount-root []
  (reagent/render [current-page] (.getElementById js/document "app")))

(defn init! []
  (accountant/configure-navigation!
    {:nav-handler
     (fn [path]
       (secretary/dispatch! path))
     :path-exists?
     (fn [path]
       (secretary/locate-route path))})
  (accountant/dispatch-current!)
  (mount-root)
  (stylefy/init))

(stylefy/class "body-container"
               {:margin 0})
