;; (apply (my-comp a b c) my-args)
;; translates to
;; (c (b (apply a my-args)))
;; or actually to
;; (apply (fn [& args]
;;          (c (apply (fn [& args]
;;                      (b (apply (fn [& args]
;;                                  (apply a args))
;;                                args)))
;;                    args)))
;;        my-args)


(defn my-comp
  ([] identity)
  ([f] f)
  ([f g] (fn [& args] (f (apply g args))))
  ([f g & fs]
   (fn [& args] (f (g (apply (apply my-comp fs) args))))))

(defn my-comp
  ([] identity)
  ([f] f)
  ([f & fs]
   (fn [& args] (f (apply (apply my-comp fs) args)))))

(defn my-comp
  ([] identity)
  ([& fs]
   (fn [& args] ((first fs) (apply (apply my-comp (rest fs)) args)))))


(defn my-comp
  [& fs]
  (reduce (fn [acc el]
            (fn [& args] (acc (apply el args))))
          fs))

((my-comp inc #(* 2 %1) #(* 3 %1)) 3)

