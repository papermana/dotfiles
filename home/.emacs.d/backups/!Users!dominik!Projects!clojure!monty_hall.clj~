(defn remove-one
  "Returns a sequence of the items in coll in which the first item that satisfies pred is removed."
  [pred coll]
  (loop [result ()
         remaining coll]
    (let [[fst & others] remaining]
      (cond
        (empty? remaining) (reverse result)
        (pred fst) (concat (reverse result) others)
        :else (recur (conj result fst)
                     others)))))

(remove-one #(> % 4) [1 2 5 5 3 6])
(remove-one #{1} [1 2 1 2])

(defn rotate
  "Rotates a sequence to the left by n. For instance (rotate 1 [1 2 3]) gives (2 3 1)."
  [n coll]
  (let [length (count coll)]
    (cond
      (< n 0)       (recur (+ n length) coll)
      (> n length)  (recur (- n length) coll)
      (<= n length) (let [[left right] (split-at n coll)]
                      (concat right left)))))

(rotate 0 [1 2 3 4])
(rotate 1 [1 2 3 4])
(rotate 4 [1 2 3 4])
(rotate 5 [1 2 3 4])
(rotate -1 [1 2 3 4])
(rotate -4 [1 2 3 4])
(rotate -5 [1 2 3 4])


(defn get-states
  [prizes]
  (->> prizes
       (map-indexed (fn [i _] (rotate i prizes)))
       (map (fn [remaining]
              {:pick nil, :remaining remaining}))))

(defn get-possible-picks
  [{:keys [remaining] :as state}]
  (for [prize remaining]
    (-> state
        (assoc :pick prize)
        (update :remaining #(remove-one #{prize} %)))))

(get-possible-picks {:pick nil, :remaining '(:car :goat :goat)})

(defn show-door
  [state]
  (update state :remaining #(->> % (remove-one #{:goat}) first)))

(show-door {:pick :car, :remaining [:goat :goat]})

(defn count-cars
  [items]
  (->> items (filter #{:car}) count))

(let [possible-endgames (->> (get-states [:car :goat :goat])
                             (mapcat get-possible-picks)
                             (map show-door))
      cars-if-stay      (->> possible-endgames
                             (map :pick))
      cars-if-switch    (->> possible-endgames
                             (map :remaining))]
  (println (str "If you stay, you get a car "
                (count-cars cars-if-stay)
                " times out of "
                (count possible-endgames)))
  (println (str "If you switch, you get a car "
                (count-cars cars-if-switch)
                " times out of "
                (count possible-endgames))))
