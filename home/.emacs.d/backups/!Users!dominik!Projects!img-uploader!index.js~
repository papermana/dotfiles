const path = require('path');
const crypto = require('crypto');
const express = require('express');
const fileUpload = require('express-fileupload');
const dotenv = require('dotenv');
const firebase = require('firebase');
const admin = require('firebase-admin');
const serviceAccount = require('./img-uploader-db97ba2deb53.json');
const googleStorage = require('@google-cloud/storage');

dotenv.config();
firebase.initializeApp({
  projectId: process.env.FIREBASE_PROJECT_ID,
  apiKey: process.env.FIREBASE_API_KEY,
  authDomain: process.env.FIREBASE_AUTH_DOMAIN,
  databaseURL: process.env.FIREBASE_DATABASE_URL,
  storageBucket: process.env.FIREBASE_STORAGE_BUCKET,
});
admin.initializeApp({
  credential: admin.credential.cert(serviceAccount),
  databaseUrl: process.env.FIREBASE_DATABASE_URL,
  storageBucket: process.env.FIREBASE_STORAGE_BUCKET,
});
const storage = googleStorage({
  projectId: process.env.FIREBASE_PROJECT_ID,
  keyFilename: './img-uploader-db97ba2deb53.json',
});

const app = express();
const bucket = admin.storage().bucket();
// const bucket = storage.bucket(process.env.FIREBASE_STORAGE_BUCKET);

app.use(fileUpload());
app.use(express.static('public'));

//app.get('/', (req, res) => {
//  res.sendFile('public/index.html');
//});

const uploadFile = (name, buffer) => {
  return new Promise((resolve, reject) => {
    console.log(buffer);
    const stream = bucket
          .file(name)
          .createWriteStream({ resumable: false });

    console.log('stream exists');

    stream.on('error', (err) => { console.log(err); reject()});
    stream.on('finish', () => { console.log('success'); resolve()});
    stream.end(buffer);
  });
};

app.post('/api/upload-image', (req, res) => {
  const file = req.files.image;
  const hash = crypto.createHash('sha1');

  hash.update(file.data);

  const hashedFile = hash.digest('hex');

  console.log('hashedFile', hashedFile);

  bucket
    .file(hashedFile)
    .exists()
    .catch((...args) => { console.log(args); })
    .then(([exists]) => {
      console.log('file exists', exists);
      if (exists) {
        return;
      }

      return uploadFile(hashedFile, file.data);
    })
    .then(() => {
      console.log('redirect');
      // res.send(200);
      res.redirect(`/${hashedFile}`);
    });
});

app.get('/:hash', (req, res) => {
  const hash = req.params.hash;

  bucket.file(hash).get().then(file => {
    res.sendFile(file);
  });
});

app.listen(process.env.PORT, () => {
  console.log(`img-uploader is now listening on port ${process.env.PORT}`);
});
